#include "defs.h"
#include "engine.h"
#include "board.h"
#include "movelist.h"
#include <iostream>
#include <vector>
#include <array>


static inline const std::vector<std::string> PERFT_FENS = {
    "3qk3/3pp3/8/8/8/8/3PP3/3QK3 b - - 0 1",
    "2nrkrn1/3ppp2/8/8/8/8/3PPP2/2NRKRN1 w - - 0 1",
    "3n4/5n2/3k4/6N1/3N4/4K3/8/8 w - - 0 1",
    "4k3/pp5p/2p3p1/3p1p2/2PPp1P1/1P6/P3P1PP/3K4 w - - 0 1",
    "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1",
    "r3k2r/p1ppqpb1/bn2pnp1/3PN3/1p2P3/2N2Q1p/PPPBBPPP/R3K2R w KQkq - 0 1",
    "r3k2r/Pppp1ppp/1b3nbN/nP6/BBP1P3/q4N2/Pp1P2PP/R2Q1RK1 w kq - 0 1",
    "rnbq1k1r/pp1Pbppp/2p5/8/2B5/8/PPP1NnPP/RNBQK2R w KQ - 1 8",
    "r4rk1/1pp1qppp/p1np1n2/2b1p1B1/2B1P1b1/P1NP1N2/1PP1QPPP/R4RK1 w - - 0 10",
    "8/2p5/3p4/KP5r/1R3p1k/8/4P1P1/8 w - - 0 1",
    "n1n5/PPPk4/8/8/8/8/4Kppp/5N1N b - - 0 1",
    "4k3/8/8/8/8/8/8/4K2R w K - 0 1",
    "4k3/8/8/8/8/8/8/R3K3 w Q - 0 1",
    "4k2r/8/8/8/8/8/8/4K3 w k - 0 1",
    "r3k3/8/8/8/8/8/8/4K3 w q - 0 1",
    "4k3/8/8/8/8/8/8/R3K2R w KQ - 0 1",
    "r3k2r/8/8/8/8/8/8/4K3 w kq - 0 1",
    "8/8/8/8/8/8/6k1/4K2R w K - 0 1",
    "8/8/8/8/8/8/1k6/R3K3 w Q - 0 1",
    "4k2r/6K1/8/8/8/8/8/8 w k - 0 1",
    "r3k3/1K6/8/8/8/8/8/8 w q - 0 1",
    "r3k2r/8/8/8/8/8/8/R3K2R w KQkq - 0 1",
    "r3k2r/8/8/8/8/8/8/1R2K2R w Kkq - 0 1",
    "r3k2r/8/8/8/8/8/8/2R1K2R w Kkq - 0 1",
    "r3k2r/8/8/8/8/8/8/R3K1R1 w Qkq - 0 1",
    "1r2k2r/8/8/8/8/8/8/R3K2R w KQk - 0 1",
    "2r1k2r/8/8/8/8/8/8/R3K2R w KQk - 0 1",
    "r3k1r1/8/8/8/8/8/8/R3K2R w KQq - 0 1",
    "4k3/8/8/8/8/8/8/4K2R b K - 0 1",
    "4k3/8/8/8/8/8/8/R3K3 b Q - 0 1",
    "4k2r/8/8/8/8/8/8/4K3 b k - 0 1",
    "r3k3/8/8/8/8/8/8/4K3 b q - 0 1",
    "4k3/8/8/8/8/8/8/R3K2R b KQ - 0 1",
    "r3k2r/8/8/8/8/8/8/4K3 b kq - 0 1",
    "8/8/8/8/8/8/6k1/4K2R b K - 0 1",
    "8/8/8/8/8/8/1k6/R3K3 b Q - 0 1",
    "4k2r/6K1/8/8/8/8/8/8 b k - 0 1",
    "r3k3/1K6/8/8/8/8/8/8 b q - 0 1",
    "r3k2r/8/8/8/8/8/8/R3K2R b KQkq - 0 1",
    "r3k2r/8/8/8/8/8/8/1R2K2R b Kkq - 0 1",
    "r3k2r/8/8/8/8/8/8/2R1K2R b Kkq - 0 1",
    "r3k2r/8/8/8/8/8/8/R3K1R1 b Qkq - 0 1",
    "1r2k2r/8/8/8/8/8/8/R3K2R b KQk - 0 1",
    "2r1k2r/8/8/8/8/8/8/R3K2R b KQk - 0 1",
    "r3k1r1/8/8/8/8/8/8/R3K2R b KQq - 0 1",
    "8/1n4N1/2k5/8/8/5K2/1N4n1/8 w - - 0 1",
    "8/1k6/8/5N2/8/4n3/8/2K5 w - - 0 1",
    "8/8/4k3/3Nn3/3nN3/4K3/8/8 w - - 0 1",
    "K7/8/2n5/1n6/8/8/8/k6N w - - 0 1",
    "k7/8/2N5/1N6/8/8/8/K6n w - - 0 1",
    "8/1n4N1/2k5/8/8/5K2/1N4n1/8 b - - 0 1",
    "8/1k6/8/5N2/8/4n3/8/2K5 b - - 0 1",
    "8/8/3K4/3Nn3/3nN3/4k3/8/8 b - - 0 1",
    "K7/8/2n5/1n6/8/8/8/k6N b - - 0 1",
    "k7/8/2N5/1N6/8/8/8/K6n b - - 0 1",
    "B6b/8/8/8/2K5/4k3/8/b6B w - - 0 1",
    "8/8/1B6/7b/7k/8/2B1b3/7K w - - 0 1",
    "k7/B7/1B6/1B6/8/8/8/K6b w - - 0 1",
    "K7/b7/1b6/1b6/8/8/8/k6B w - - 0 1",
    "B6b/8/8/8/2K5/5k2/8/b6B b - - 0 1",
    "8/8/1B6/7b/7k/8/2B1b3/7K b - - 0 1",
    "k7/B7/1B6/1B6/8/8/8/K6b b - - 0 1",
    "K7/b7/1b6/1b6/8/8/8/k6B b - - 0 1",
    "7k/RR6/8/8/8/8/rr6/7K w - - 0 1",
    "R6r/8/8/2K5/5k2/8/8/r6R w - - 0 1",
    "R6r/8/8/2K5/5k2/8/8/r6R b - - 0 1",
    "7k/RR6/8/8/8/8/rr6/7K b - - 0 1",
    "6kq/8/8/8/8/8/8/7K w - - 0 1",
    "6KQ/8/8/8/8/8/8/7k b - - 0 1",
    "K7/8/8/3Q4/4q3/8/8/7k w - - 0 1",
    "6qk/8/8/8/8/8/8/7K b - - 0 1",
    "K7/8/8/3Q4/4q3/8/8/7k b - - 0 1",
    "8/8/8/8/8/K7/P7/k7 w - - 0 1",
    "8/8/8/8/8/7K/7P/7k w - - 0 1",
    "K7/p7/k7/8/8/8/8/8 w - - 0 1",
    "7K/7p/7k/8/8/8/8/8 w - - 0 1",
    "8/2k1p3/3pP3/3P2K1/8/8/8/8 w - - 0 1",
    "8/8/8/8/8/K7/P7/k7 b - - 0 1",
    "8/8/8/8/8/7K/7P/7k b - - 0 1",
    "K7/p7/k7/8/8/8/8/8 b - - 0 1",
    "7K/7p/7k/8/8/8/8/8 b - - 0 1",
    "8/2k1p3/3pP3/3P2K1/8/8/8/8 b - - 0 1",
    "8/8/8/8/8/4k3/4P3/4K3 w - - 0 1",
    "4k3/4p3/4K3/8/8/8/8/8 b - - 0 1",
    "8/8/7k/7p/7P/7K/8/8 w - - 0 1",
    "8/8/k7/p7/P7/K7/8/8 w - - 0 1",
    "8/8/3k4/3p4/3P4/3K4/8/8 w - - 0 1",
    "8/3k4/3p4/8/3P4/3K4/8/8 w - - 0 1",
    "8/8/3k4/3p4/8/3P4/3K4/8 w - - 0 1",
    "k7/8/3p4/8/3P4/8/8/7K w - - 0 1",
    "8/8/7k/7p/7P/7K/8/8 b - - 0 1",
    "8/8/k7/p7/P7/K7/8/8 b - - 0 1",
    "8/8/3k4/3p4/3P4/3K4/8/8 b - - 0 1",
    "8/3k4/3p4/8/3P4/3K4/8/8 b - - 0 1",
    "8/8/3k4/3p4/8/3P4/3K4/8 b - - 0 1",
    "k7/8/3p4/8/3P4/8/8/7K b - - 0 1",
    "7k/3p4/8/8/3P4/8/8/K7 w - - 0 1",
    "7k/8/8/3p4/8/8/3P4/K7 w - - 0 1",
    "k7/8/8/7p/6P1/8/8/K7 w - - 0 1",
    "k7/8/7p/8/8/6P1/8/K7 w - - 0 1",
    "k7/8/8/6p1/7P/8/8/K7 w - - 0 1",
    "k7/8/6p1/8/8/7P/8/K7 w - - 0 1",
    "k7/8/8/3p4/4p3/8/8/7K w - - 0 1",
    "k7/8/3p4/8/8/4P3/8/7K w - - 0 1",
    "7k/3p4/8/8/3P4/8/8/K7 b - - 0 1",
    "7k/8/8/3p4/8/8/3P4/K7 b - - 0 1",
    "k7/8/8/7p/6P1/8/8/K7 b - - 0 1",
    "k7/8/7p/8/8/6P1/8/K7 b - - 0 1",
    "k7/8/8/6p1/7P/8/8/K7 b - - 0 1",
    "k7/8/6p1/8/8/7P/8/K7 b - - 0 1",
    "k7/8/8/3p4/4p3/8/8/7K b - - 0 1",
    "k7/8/3p4/8/8/4P3/8/7K b - - 0 1",
    "7k/8/8/p7/1P6/8/8/7K w - - 0 1",
    "7k/8/p7/8/8/1P6/8/7K w - - 0 1",
    "7k/8/8/1p6/P7/8/8/7K w - - 0 1",
    "7k/8/1p6/8/8/P7/8/7K w - - 0 1",
    "k7/7p/8/8/8/8/6P1/K7 w - - 0 1",
    "k7/6p1/8/8/8/8/7P/K7 w - - 0 1",
    "3k4/3pp3/8/8/8/8/3PP3/3K4 w - - 0 1",
    "7k/8/8/p7/1P6/8/8/7K b - - 0 1",
    "7k/8/p7/8/8/1P6/8/7K b - - 0 1",
    "7k/8/8/1p6/P7/8/8/7K b - - 0 1",
    "7k/8/1p6/8/8/P7/8/7K b - - 0 1",
    "k7/7p/8/8/8/8/6P1/K7 b - - 0 1",
    "k7/6p1/8/8/8/8/7P/K7 b - - 0 1",
    "3k4/3pp3/8/8/8/8/3PP3/3K4 b - - 0 1",
    "8/Pk6/8/8/8/8/6Kp/8 w - - 0 1",
    "n1n5/1Pk5/8/8/8/8/5Kp1/5N1N w - - 0 1",
    "8/PPPk4/8/8/8/8/4Kppp/8 w - - 0 1",
    "n1n5/PPPk4/8/8/8/8/4Kppp/5N1N w - - 0 1",
    "8/Pk6/8/8/8/8/6Kp/8 b - - 0 1",
    "n1n5/1Pk5/8/8/8/8/5Kp1/5N1N b - - 0 1",
    "8/PPPk4/8/8/8/8/4Kppp/8 b - - 0 1",
    "r2q1rk1/pP1p2pp/Q4n2/bbp1p3/Np6/1B3NBn/pPPP1PPP/R3K2R b KQ - 0 1",
    "8/3K4/2p5/p2b2r1/5k2/8/8/1q6 b - - 1 67",
    "3k4/3p4/8/K1P4r/8/8/8/8 b - - 0 1",
    "8/8/4k3/8/2p5/8/B2P2K1/8 w - - 0 1",
    "8/8/1k6/2b5/2pP4/8/5K2/8 b - d3 0 1",
    "5k2/8/8/8/8/8/8/4K2R w K - 0 1",
    "3k4/8/8/8/8/8/8/R3K3 w Q - 0 1",
    "r3k2r/1b4bq/8/8/8/8/7B/R3K2R w KQkq - 0 1",
    "r3k2r/8/3Q4/8/8/5q2/8/R3K2R b KQkq - 0 1",
    "2K2r2/4P3/8/8/8/8/8/3k4 w - - 0 1",
    "8/8/1P2K3/8/2n5/1q6/8/5k2 b - - 0 1",
    "4k3/1P6/8/8/8/8/K7/8 w - - 0 1",
    "8/P1k5/K7/8/8/8/8/8 w - - 0 1",
    "K1k5/8/P7/8/8/8/8/8 w - - 0 1",
    "8/k1P5/8/1K6/8/8/8/8 w - - 0 1",
    "8/8/2k5/5q2/5n2/8/5K2/8 b - - 0 1",
};


static inline const std::vector<std::vector<uint64>> PERFT_SOLUTIONS = {
    { 1, 12,  141,  2758,   50760,   1082533,   22240577,    483413686,  10267317439, 222539743521 },
    { 1, 11,  121,  1629,   21883,    350790,    5604562,    102904738,   1877173820,  38354094602 },
    { 1, 21,  238,  4497,   58352,   1037254,   14314799,    242652292,   3473255783,  57193406492 },
    { 1, 15,  249,  3645,   59115,    845450,   13297629,    185614474,   2822140794,  38415654891 },
    { 1, 20,  400,  8902,  197281,   4865609,  119060324,   3195901860,  84998978956,            0 },
    { 1, 48, 2039, 97862, 4085603, 193690690, 8031647685,            0,            0,            0 },
    { 1,  6,  264,  9467,  422333,  15833292,  706045033,  27209691363,            0,            0 },
    { 1, 44, 1486, 62379, 2103487,  89941194, 3048196529, 131724123591,            0,            0 },
    { 1, 46, 2079, 89890, 3894594, 164075551, 6923051137, 287188994746,            0,            0 },
    { 1, 14,  191,  2812,   43238,    674624,   11030083,    178633661,   3009794393,  50086749815 },
    { 1, 24,  496,  9483,  182838,   3605103,   71179139,   1482218224,  30927558887, 679481752911 },
    { 1, 15,   66,  1197,    7059,    133987,     764643,     14805594,     87317147,   1703794809 },
    { 1, 16,   71,  1287,    7626,    145232,     846648,     16460756,     96556611,   1889774302 },
    { 1,  5,   75,   459,    8290,     47635,     899442,      5353768,    103333751,    608114895 },
    { 1,  5,   80,   493,    8897,     52710,    1001523,      5938701,    115071799,    677581197 },
    { 1, 26,  112,  3189,   17945,    532933,    2788982,     84866591,    453607151,  13978925665 },
    { 1,  5,  130,   782,   22180,    118882,    3517770,     19168414,    581590988,   3112642400 },
    { 1, 12,   38,   564,    2219,     37735,     185867,      3329588,     17050071,    315564669 },
    { 1, 15,   65,  1018,    4573,     80619,     413018,      7573823,     39607193,    744383867 },
    { 1,  3,   32,   134,    2073,     10485,     179869,       954475,     17275967,     96525563 },
    { 1,  4,   49,   243,    3991,     20780,     367724,      1971278,     36369630,    201710527 },
    { 1, 26,  568, 13744,  314346,   7594526,  179862938,   4408319122, 106978833229,            0 },
    { 1, 25,  567, 14095,  328965,   8153719,  195629489,   4887262370, 119526124605,            0 },
    { 1, 25,  548, 13502,  312835,   7736373,  184411439,   4594253304, 111694267738,            0 },
    { 1, 25,  547, 13579,  316214,   7878456,  189224276,   4746418307, 116177435611,            0 },
    { 1, 26,  583, 14252,  334705,   8198901,  198328929,   4908056283, 120899397374,            0 },
    { 1, 25,  560, 13592,  317324,   7710115,  185959088,   4569222788, 112226930276,            0 },
    { 1, 25,  560, 13607,  320792,   7848606,  190755813,   4720992934, 116657386315,            0 },
    { 1,  5,   75,   459,    8290,     47635,     899442,      5353768,    103333751,    608114895 },
    { 1,  5,   80,   493,    8897,     52710,    1001523,      5938701,    115071799,    677581197 },
    { 1, 15,   66,  1197,    7059,    133987,     764643,     14805594,     87317147,   1703794809 },
    { 1, 16,   71,  1287,    7626,    145232,     846648,     16460756,     96556611,   1889774302 },
    { 1,  5,  130,   782,   22180,    118882,    3517770,     19168414,    581590988,   3112642400 },
    { 1, 26,  112,  3189,   17945,    532933,    2788982,     84866591,    453607151,  13978925665 },
    { 1,  3,   32,   134,    2073,     10485,     179869,       954475,     17275967,     96525563 },
    { 1,  4,   49,   243,    3991,     20780,     367724,      1971278,     36369630,    201710527 },
    { 1, 12,   38,   564,    2219,     37735,     185867,      3329588,     17050071,    315564669 },
    { 1, 15,   65,  1018,    4573,     80619,     413018,      7573823,     39607193,    744383867 },
    { 1, 26,  568, 13744,  314346,   7594526,  179862938,   4408319122, 106978833229,            0 },
    { 1, 26,  583, 14252,  334705,   8198901,  198328929,   4908056283, 120899397374,            0 },
    { 1, 25,  560, 13592,  317324,   7710115,  185959088,   4569222788, 112226930276,            0 },
    { 1, 25,  560, 13607,  320792,   7848606,  190755813,   4720992934, 116657386315,            0 },
    { 1, 25,  567, 14095,  328965,   8153719,  195629489,   4887262370, 119526124605,            0 },
    { 1, 25,  548, 13502,  312835,   7736373,  184411439,   4594253304, 111694267738,            0 },
    { 1, 25,  547, 13579,  316214,   7878456,  189224276,   4746418307, 116177435611,            0 },
    { 1, 14,  195,  2760,   38675,    570726,    8107539,    121484034,   1753715359,  26499036470 },
    { 1, 11,  156,  1636,   20534,    223507,    2594412,     28293654,    322568880,   3544515668 },
    { 1, 19,  289,  4442,   73584,   1198299,   19870403,    320053913,   5233071416,  83318010959 },
    { 1,  3,   51,   345,    5301,     38348,     588695,      5041119,     76286462,    688086116 },
    { 1, 17,   54,   835,    5910,     92250,     688780,     10553652,     92362544,   1428723875 },
    { 1, 15,  193,  2816,   40039,    582642,    8503277,    124446964,   1854010761,  27345766938 },
    { 1, 16,  180,  2290,   24640,    288141,    3147566,     36049251,    395885775,   4477909807 },
    { 1,  4,   68,  1118,   16199,    281190,    4405103,     75214812,   1187073721,  19796532669 },
    { 1, 17,   54,   835,    5910,     92250,     688780,     10553652,     92362544,   1428723875 },
    { 1,  3,   51,   345,    5301,     38348,     588695,      5041119,     76286462,    688086116 },
    { 1, 17,  278,  4607,   76778,   1320507,   22823890,    408424597,   7349538114, 136153797038 },
    { 1, 21,  316,  5744,   93338,   1713368,   28861171,    531840753,   9119845695, 169243076286 },
    { 1, 21,  144,  3242,   32955,    787524,    7881673,    194492651,   2025315331,  51076282848 },
    { 1,  7,  143,  1416,   31787,    310862,    7382896,     75429328,   1854531462,  19420100892 },
    { 1,  6,  106,  1829,   31151,    530585,    9250746,    160677837,   2896664180,  52198917127 },
    { 1, 17,  309,  5133,   93603,   1591064,   29027891,    499360711,   9168257475, 159253031820 },
    { 1,  7,  143,  1416,   31787,    310862,    7382896,     75429328,   1854531462,  19420100892 },
    { 1, 21,  144,  3242,   32955,    787524,    7881673,    194492651,   2025315331,  51076282848 },
    { 1, 19,  275,  5300,  104342,   2161211,   44956585,    974704196,  21232718180, 473590802735 },
    { 1, 36, 1027, 29215,  771461,  20506480,  525169084,  13554890298, 342791503423,            0 },
    { 1, 36, 1027, 29227,  771368,  20521342,  524966748,  13566510069, 342630069657,            0 },
    { 1, 19,  275,  5300,  104342,   2161211,   44956585,    974704196,  21232718180, 473590802735 },
    { 1,  2,   36,   143,    3637,     14893,     391507,      1750864,     46863494,    208573802 },
    { 1,  2,   36,   143,    3637,     14893,     391507,      1750864,     46863494,    208573802 },
    { 1,  6,   35,   495,    8349,    166741,    3370175,     68590202,   1389464081,  28177985062 },
    { 1, 22,   43,  1015,    4167,    105749,     419369,     10830989,     47217486,   1233347730 },
    { 1,  6,   35,   495,    8349,    166741,    3370175,     68590202,   1389464081,  28177985062 },
    { 1,  3,    7,    43,     199,      1347,       6249,        45628,       251392,      1901941 },
    { 1,  3,    7,    43,     199,      1347,       6249,        45628,       251392,      1901941 },
    { 1,  1,    3,    12,      80,       342,       2343,        12377,        92148,       517366 },
    { 1,  1,    3,    12,      80,       342,       2343,        12377,        92148,       517366 },
    { 1,  7,   35,   210,    1091,      7028,      34834,       221609,      1188749,      7618365 },
    { 1,  1,    3,    12,      80,       342,       2343,        12377,        92148,       517366 },
    { 1,  1,    3,    12,      80,       342,       2343,        12377,        92148,       517366 },
    { 1,  3,    7,    43,     199,      1347,       6249,        45628,       251392,      1901941 },
    { 1,  3,    7,    43,     199,      1347,       6249,        45628,       251392,      1901941 },
    { 1,  5,   35,   182,    1091,      5408,      34822,       186948,      1187695,      6463459 },
    { 1,  2,    8,    44,     282,      1814,      11848,        83195,       560569,      4029177 },
    { 1,  2,    8,    44,     282,      1814,      11848,        83195,       560569,      4029177 },
    { 1,  3,    9,    57,     360,      1969,      10724,        65679,       400223,      2459780 },
    { 1,  3,    9,    57,     360,      1969,      10724,        65679,       400223,      2459780 },
    { 1,  5,   25,   180,    1294,      8296,      53138,       345129,      2237962,     14268054 },
    { 1,  8,   61,   483,    3213,     23599,     157093,      1144376,      7572916,     53376759 },
    { 1,  8,   61,   411,    3213,     21637,     158065,      1055522,      7594587,     49800305 },
    { 1,  4,   15,    90,     534,      3450,      20960,       141778,       887372,      6113978 },
    { 1,  3,    9,    57,     360,      1969,      10724,        65679,       400223,      2459780 },
    { 1,  3,    9,    57,     360,      1969,      10724,        65679,       400223,      2459780 },
    { 1,  5,   25,   180,    1294,      8296,      53138,       345129,      2237962,     14268054 },
    { 1,  8,   61,   411,    3213,     21637,     158065,      1055522,      7594587,     49800305 },
    { 1,  8,   61,   483,    3213,     23599,     157093,      1144376,      7572916,     53376759 },
    { 1,  4,   15,    89,     537,      3309,      21104,       132804,       895301,      5684619 },
    { 1,  4,   19,   117,     720,      4661,      32191,       220314,      1540250,     10654934 },
    { 1,  5,   19,   116,     716,      4786,      30980,       204340,      1407832,      9386128 },
    { 1,  5,   22,   139,     877,      6112,      41874,       304498,      2185098,     16228469 },
    { 1,  4,   16,   101,     637,      4354,      29679,       216305,      1569154,     11763413 },
    { 1,  5,   22,   139,     877,      6112,      41874,       304498,      2185106,     16217575 },
    { 1,  4,   16,   101,     637,      4354,      29679,       216305,      1569154,     11751696 },
    { 1,  3,   15,    84,     573,      3013,      22886,       128193,      1047210,      5871381 },
    { 1,  4,   16,   101,     637,      4271,      28662,       204279,      1457001,     10663527 },
    { 1,  5,   19,   117,     720,      5014,      32167,       226157,      1536896,     10945231 },
    { 1,  4,   19,   117,     712,      4658,      30749,       213308,      1396378,      9844588 },
    { 1,  5,   22,   139,     877,      6112,      41874,       304498,      2185106,     16217575 },
    { 1,  4,   16,   101,     637,      4354,      29679,       216305,      1569154,     11751696 },
    { 1,  5,   22,   139,     877,      6112,      41874,       304498,      2185098,     16228469 },
    { 1,  4,   16,   101,     637,      4354,      29679,       216305,      1569154,     11763413 },
    { 1,  5,   15,   102,     569,      4337,      22579,       184873,      1029675,      8995449 },
    { 1,  4,   16,   101,     637,      4271,      28662,       204279,      1457001,     10663527 },
    { 1,  5,   22,   139,     877,      6112,      41874,       304498,      2185098,     16228469 },
    { 1,  4,   16,   101,     637,      4354,      29679,       216305,      1569154,     11763413 },
    { 1,  5,   22,   139,     877,      6112,      41874,       216305,      1569154,     11763413 },
    { 1,  4,   16,   101,     637,      4354,      29679,       216305,      1569154,     11751696 },
    { 1,  5,   25,   161,    1035,      7574,      55338,       419956,      3167897,     24678359 },
    { 1,  5,   25,   161,    1035,      7574,      55338,       419956,      3167897,     24664969 },
    { 1,  7,   49,   378,    2902,     24122,     199002,      1694225,     14281407,    121183847 },
    { 1,  5,   22,   139,     877,      6112,      41874,       304498,      2185106,     16217575 },
    { 1,  4,   16,   101,     637,      4354,      29679,       216305,      1569154,     11751696 },
    { 1,  5,   22,   139,     877,      6112,      41874,       304498,      2185098,     16228469 },
    { 1,  4,   16,   101,     637,      4354,      29679,       216305,      1569154,     11763413 },
    { 1,  5,   25,   161,    1035,      7574,      55338,       419956,      3167897,     24664969 },
    { 1,  5,   25,   161,    1035,      7574,      55338,       419956,      3167897,     24678359 },
    { 1,  7,   49,   378,    2902,     24122,     199002,      1694225,     14281407,    121183847 },
    { 1, 11,   97,   887,    8048,     90606,    1030499,     13644504,    183653974,   2728354409 },
    { 1, 24,  421,  7421,  124608,   2193768,   37665329,    690692460,  12436870112, 237497896553 },
    { 1, 18,  270,  4699,   79355,   1533145,   28859283,    614154982,  12793805091, 294485017090 },
    { 1, 24,  496,  9483,  182838,   3605103,   71179139,   1482218224,  30927558887,            0 },
    { 1, 11,   97,   887,    8048,     90606,    1030499,     13644504,    183653974,   2728354409 },
    { 1, 24,  421,  7421,  124608,   2193768,   37665329,    690692460,  12436870112, 237497896553 },
    { 1, 18,  270,  4699,   79355,   1533145,   28859283,    614154982,  12793805091, 294485017090 },
    { 1,  6,  264,  9467,  422333,  15833292,  706045033,  27209691363,            0,            0 },
    { 1, 50,  279, 13310,   54703,   2538084,   10809689,    493407574,   2074492344,  93718646102 },
    { 1, 18,   92,  1670,   10138,    185429,    1134888,     20757544,    130459988,   2388952824 },
    { 1, 13,  102,  1266,   10276,    135655,    1015133,     14047573,    102503850,   1468689775 },
    { 1, 15,  126,  1928,   13931,    206379,    1440467,     21190412,    144302151,   2124044553 },
    { 1, 15,   66,  1198,    6399,    120330,     661072,     12762196,     73450134,   1430182506 },
    { 1, 16,   71,  1286,    7418,    141077,     803711,     15594314,     91628014,   1791353825 },
    { 1, 26, 1141, 27826, 1274206,  31912360, 1509218880,            0,            0,            0 },
    { 1, 44, 1494, 50509, 1720476,  58773923, 2010267707,            0,            0,            0 },
    { 1, 11,  133,  1442,   19174,    266199,    3821001,     60651209,    905613447,  16076682981 },
    { 1, 29,  165,  5160,   31961,   1004658,    6334638,    197013195,   1474877544,  44517774647 },
    { 1,  9,   40,   472,    2661,     38983,     217342,      3742283,     20625698,    397481663 },
    { 1,  6,   27,   273,    1329,     18135,      92683,      1555980,      8110830,    153850274 },
    { 1,  2,    6,    13,      63,       382,       2217,        15453,        93446,       998319 },
    { 1, 10,   25,   268,     926,     10857,      43261,       567584,      2518905,     37109897 },
    { 1, 37,  183,  6559,   23527,    811573,    3114998,    104644508,    418091555,  13726035351 },
};


/*
* 
* Find the max depth for the given perft test. The max depth for any perft test
* is 9, but some tests have too many leaf nodes at depth 9 to run in a reasonble
* amount of time. These tests have a '0' for higher depths in PERFT_SOLUTIONS.
* 
*/
static int findMaxDepth(int test, int maxDepth) {
    int depth = 9;
    while (PERFT_SOLUTIONS[test][depth] == 0) {
        --depth;
    }
    return std::min(depth, maxDepth);
}


/*
 * 
 * Recursive function to count the number of moves at each depth, up to a depth
 * of maxDepth. The number of positions at each depth is stored in the result
 * array.
 *
 */
static void perft(Board& board, int depth, int maxDepth, std::array<uint64, 10>& result) {
    ++result[depth];
    if (depth >= maxDepth) {
        return;
    }
    MoveList moveList = MoveList(board);
    int numMoves = moveList.numMoves();
    for (int i = 0; i < numMoves; ++i) {
        int move = moveList[i];
        if (board.makeMove(move)) {
            perft(board, depth + 1, maxDepth, result);
            board.undoMove();
        }
    }
}


/*
 * 
 * Runs the Perft Tests for this engine. Perft Tests are used to debug the
 * engine's move generation by counting the number of positions reachable from
 * the current position, up to a certain depth. For example, there are exactly
 * 4,865,609 positions reachable from the starting position after making 5
 * moves (going 5 nodes deep in the search tree). If the perft test returns a
 * different node count at a given depth, then there is bug in the engine,
 * either in the move generation or in making/undoing moves.
 * 
 */
void Engine::runPerftTests() const {
    assert(PERFT_FENS.size() == PERFT_SOLUTIONS.size());

    std::cout << "Enter the max search depth for the perft tests (3-5 recommended): ";
    int depth = 0;
    std::cin >> depth;
    if (depth < 1 || depth > 9) {
        std::cout << "Invalid depth: " << depth << '\n';
        return;
    }

    Board b = Board();
    uint64 totalTime = 0, totalLeafNodes = 0, numPassed = 0;
    int num_tests = (int) PERFT_FENS.size();
    for (int test = 0; test < num_tests; ++test) {
        std::cout << "----------------------------------------------------------------------------------------" << std::endl;
        std::cout << (test + 1) << ") FEN: \"" << PERFT_FENS[test] << "\"" << std::endl;
        if (!b.setToFEN(PERFT_FENS[test])) {
            std::cout << "ERROR: Invalid Fen: " << PERFT_FENS[test] << std::endl;
            return;
        }
        std::array<uint64, 10> result = { 0 };
        int maxDepth = findMaxDepth(test, depth);

        uint64 startTime = currentTime();
        perft(b, 0, maxDepth, result);
        uint64 endTime = currentTime();

        int passed = 1;
        for (int d = 1; d <= maxDepth; ++d) {
            printf("depth: %d | test result: %13llu | ", d, result[d]);
            if (result[d] == PERFT_SOLUTIONS[test][d]) {
                puts("passed");
            } else {
                printf("----FAILED---- answer: %lld\n", PERFT_SOLUTIONS[test][d]);
                passed = 0;
            }
        }
        totalLeafNodes += result[maxDepth];
        totalTime += endTime - startTime;
        numPassed += passed;
        std::cout << "total time: " << (endTime - startTime) << " ms" << std::endl;
    }
    std::cout << "----------------------------------------------------------------------------------------" << std::endl;
    if (totalTime == 0) {
        std::cout << "This engine visited " << totalLeafNodes << " leaf nodes in < 1 millisecond." << std::endl;
        std::cout << "Average: > " << totalLeafNodes * 1000 << " Leaf Nodes / Second." << std::endl;
    } else {
        std::cout << "This engine visited " << totalLeafNodes << " leaf nodes in "
            << totalTime << " milliseconds." << std::endl;
        std::cout << "Average: " << totalLeafNodes * 1000 / totalTime << " Leaf Nodes / Second" << std::endl;
    }
    std::cout << "Passed: " << numPassed << " / " << num_tests << std::endl;
}
